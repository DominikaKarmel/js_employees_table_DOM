{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var table = document.querySelector(\"table tbody\");\n    var tableHeaders = document.querySelectorAll(\"table th\");\n    var form = document.createElement(\"form\");\n    form.className = \"new-employee-form\";\n    var formInputs = [\n        {\n            label: \"Name\",\n            type: \"text\",\n            name: \"name\",\n            qa: \"name\"\n        },\n        {\n            label: \"Position\",\n            type: \"text\",\n            name: \"position\",\n            qa: \"position\"\n        },\n        {\n            label: \"Office\",\n            type: \"select\",\n            name: \"office\",\n            qa: \"office\",\n            options: [\n                \"Tokyo\",\n                \"Singapore\",\n                \"London\",\n                \"New York\",\n                \"Edinburgh\",\n                \"San Francisco\"\n            ]\n        },\n        {\n            label: \"Age\",\n            type: \"number\",\n            name: \"age\",\n            qa: \"age\"\n        },\n        {\n            label: \"Salary\",\n            type: \"number\",\n            name: \"salary\",\n            qa: \"salary\"\n        }\n    ];\n    var notification = document.createElement(\"div\");\n    notification.setAttribute(\"data-qa\", \"notification\");\n    var editableCell = null;\n    var createFormInput = function(param) {\n        var label = param.label, type = param.type, name = param.name, qa = param.qa, options = param.options;\n        var inputWrapper = document.createElement(\"label\");\n        var input = type === \"select\" ? document.createElement(\"select\") : document.createElement(\"input\");\n        input.name = name;\n        input.type = type;\n        if (type === \"select\") options.forEach(function(optionText) {\n            var option = document.createElement(\"option\");\n            option.value = optionText;\n            option.text = optionText;\n            input.appendChild(option);\n        });\n        inputWrapper.innerHTML = \"\".concat(label, \": \");\n        inputWrapper.appendChild(input);\n        inputWrapper.setAttribute(\"data-qa\", qa);\n        form.appendChild(inputWrapper);\n        return input;\n    };\n    formInputs.forEach(createFormInput);\n    var submitButton = document.createElement(\"button\");\n    submitButton.type = \"button\";\n    submitButton.textContent = \"Save to table\";\n    submitButton.addEventListener(\"click\", handleFormSubmit);\n    form.appendChild(submitButton);\n    document.body.appendChild(form);\n    document.body.appendChild(notification);\n    tableHeaders.forEach(function(header, index) {\n        header.addEventListener(\"click\", function() {\n            return sortTable(index);\n        });\n    });\n    table.addEventListener(\"click\", function(event) {\n        return selectRow(event);\n    });\n    table.addEventListener(\"dblclick\", function(event) {\n        return startEditingCell(event);\n    });\n    function handleFormSubmit() {\n        var formData = {};\n        var isValid = true;\n        formInputs.forEach(function(param) {\n            var name = param.name, type = param.type, qa = param.qa;\n            var input = form.querySelector('[name=\"'.concat(name, '\"]'));\n            formData[name] = type === \"number\" ? parseFloat(input.value) : input.value;\n            if (!input.checkValidity() || input.value.trim() === \"\") {\n                isValid = false;\n                showNotification(\"error\", \"All fields are required. Please fill in all the inputs.\");\n            }\n        });\n        if (isValid) {\n            addEmployeeToTable(formData);\n            showNotification(\"success\", \"Employee added successfully.\");\n            form.reset();\n        }\n    }\n    function addEmployeeToTable(employee) {\n        var newRow = document.createElement(\"tr\");\n        Object.values(employee).forEach(function(value) {\n            var cell = document.createElement(\"td\");\n            cell.textContent = value;\n            newRow.appendChild(cell);\n        });\n        table.appendChild(newRow);\n    }\n    function showNotification(type, message) {\n        notification.className = type;\n        notification.textContent = message;\n        setTimeout(function() {\n            notification.textContent = \"\";\n        }, 3000);\n    }\n    function sortTable(columnIndex) {\n        var rows = Array.from(document.querySelectorAll(\"table tbody tr\"));\n        var sortOrder = rows[0].children[columnIndex].textContent.toLowerCase() === \"name\" ? 1 : -1;\n        rows.sort(function(a, b) {\n            var aValue = a.children[columnIndex].textContent;\n            var bValue = b.children[columnIndex].textContent;\n            if (aValue < bValue) return -1 * sortOrder;\n            else if (aValue > bValue) return 1 * sortOrder;\n            else return 0;\n        });\n        var tbody = document.querySelector(\"table tbody\");\n        tbody.innerHTML = \"\";\n        rows.forEach(function(row) {\n            return tbody.appendChild(row);\n        });\n    }\n    function selectRow(event) {\n        var selectedRow = event.target.closest(\"tr\");\n        if (selectedRow && !selectedRow.classList.contains(\"active\")) {\n            var rows = document.querySelectorAll(\"table tbody tr\");\n            rows.forEach(function(row) {\n                return row.classList.remove(\"active\");\n            });\n            selectedRow.classList.add(\"active\");\n        }\n    }\n    function startEditingCell(event) {\n        var cell = event.target.closest(\"td\");\n        if (cell && !editableCell) {\n            editableCell = cell;\n            var oldValue = cell.textContent;\n            var input = document.createElement(\"input\");\n            input.className = \"cell-input\";\n            input.value = oldValue;\n            input.addEventListener(\"blur\", function() {\n                saveChanges(input.value);\n            });\n            input.addEventListener(\"keypress\", function(e) {\n                if (e.key === \"Enter\") saveChanges(input.value);\n            });\n            cell.textContent = \"\";\n            cell.appendChild(input);\n            input.focus();\n        }\n    }\n    function saveChanges(newValue) {\n        if (editableCell) {\n            editableCell.textContent = newValue;\n            editableCell = null;\n        }\n    }\n});\n\n//# sourceMappingURL=index.5113fb22.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const table = document.querySelector('table tbody');\n  const tableHeaders = document.querySelectorAll('table th');\n  const form = document.createElement('form');\n\n  form.className = 'new-employee-form';\n\n  const formInputs = [\n    {\n      label: 'Name', type: 'text', name: 'name', qa: 'name',\n    },\n    {\n      label: 'Position', type: 'text', name: 'position', qa: 'position',\n    },\n    {\n      label: 'Office',\n      type: 'select',\n      name: 'office',\n      qa: 'office',\n      options: ['Tokyo', 'Singapore', 'London',\n        'New York', 'Edinburgh', 'San Francisco'],\n    },\n    {\n      label: 'Age', type: 'number', name: 'age', qa: 'age',\n    },\n    {\n      label: 'Salary', type: 'number', name: 'salary', qa: 'salary',\n    },\n  ];\n\n  const notification = document.createElement('div');\n\n  notification.setAttribute('data-qa', 'notification');\n\n  let editableCell = null;\n\n  const createFormInput = ({ label, type, name, qa, options }) => {\n    const inputWrapper = document.createElement('label');\n    const input = type === 'select'\n      ? document.createElement('select')\n      : document.createElement('input');\n\n    input.name = name;\n    input.type = type;\n\n    if (type === 'select') {\n      options.forEach((optionText) => {\n        const option = document.createElement('option');\n\n        option.value = optionText;\n        option.text = optionText;\n        input.appendChild(option);\n      });\n    }\n\n    inputWrapper.innerHTML = `${label}: `;\n    inputWrapper.appendChild(input);\n    inputWrapper.setAttribute('data-qa', qa);\n    form.appendChild(inputWrapper);\n\n    return input;\n  };\n\n  formInputs.forEach(createFormInput);\n\n  const submitButton = document.createElement('button');\n\n  submitButton.type = 'button';\n  submitButton.textContent = 'Save to table';\n  submitButton.addEventListener('click', handleFormSubmit);\n  form.appendChild(submitButton);\n\n  document.body.appendChild(form);\n  document.body.appendChild(notification);\n\n  tableHeaders.forEach((header, index) => {\n    header.addEventListener('click', () => sortTable(index));\n  });\n\n  table.addEventListener('click', (event) => selectRow(event));\n\n  table.addEventListener('dblclick', (event) => startEditingCell(event));\n\n  function handleFormSubmit() {\n    const formData = {};\n    let isValid = true;\n\n    formInputs.forEach(({ name, type, qa }) => {\n      const input = form.querySelector(`[name=\"${name}\"]`);\n\n      formData[name] = type === 'number'\n        ? parseFloat(input.value)\n        : input.value;\n\n      if (!input.checkValidity() || input.value.trim() === '') {\n        isValid = false;\n\n        showNotification('error',\n          'All fields are required. Please fill in all the inputs.');\n      }\n    });\n\n    if (isValid) {\n      addEmployeeToTable(formData);\n      showNotification('success', 'Employee added successfully.');\n      form.reset();\n    }\n  }\n\n  function addEmployeeToTable(employee) {\n    const newRow = document.createElement('tr');\n\n    Object.values(employee).forEach((value) => {\n      const cell = document.createElement('td');\n\n      cell.textContent = value;\n      newRow.appendChild(cell);\n    });\n    table.appendChild(newRow);\n  }\n\n  function showNotification(type, message) {\n    notification.className = type;\n    notification.textContent = message;\n\n    setTimeout(() => {\n      notification.textContent = '';\n    }, 3000);\n  }\n\n  function sortTable(columnIndex) {\n    const rows = Array.from(document.querySelectorAll('table tbody tr'));\n\n    const sortOrder = rows[0].children[columnIndex]\n      .textContent.toLowerCase() === 'name' ? 1 : -1;\n\n    rows.sort((a, b) => {\n      const aValue = a.children[columnIndex].textContent;\n      const bValue = b.children[columnIndex].textContent;\n\n      if (aValue < bValue) {\n        return -1 * sortOrder;\n      } else if (aValue > bValue) {\n        return 1 * sortOrder;\n      } else {\n        return 0;\n      }\n    });\n\n    const tbody = document.querySelector('table tbody');\n\n    tbody.innerHTML = '';\n    rows.forEach(row => tbody.appendChild(row));\n  }\n\n  function selectRow(event) {\n    const selectedRow = event.target.closest('tr');\n\n    if (selectedRow && !selectedRow.classList.contains('active')) {\n      const rows = document.querySelectorAll('table tbody tr');\n\n      rows.forEach(row => row.classList.remove('active'));\n\n      selectedRow.classList.add('active');\n    }\n  }\n\n  function startEditingCell(event) {\n    const cell = event.target.closest('td');\n\n    if (cell && !editableCell) {\n      editableCell = cell;\n\n      const oldValue = cell.textContent;\n      const input = document.createElement('input');\n\n      input.className = 'cell-input';\n      input.value = oldValue;\n\n      input.addEventListener('blur', () => {\n        saveChanges(input.value);\n      });\n\n      input.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          saveChanges(input.value);\n        }\n      });\n\n      cell.textContent = '';\n      cell.appendChild(input);\n      input.focus();\n    }\n  }\n\n  function saveChanges(newValue) {\n    if (editableCell) {\n      editableCell.textContent = newValue;\n      editableCell = null;\n    }\n  }\n});\n"],"names":["document","addEventListener","table","querySelector","tableHeaders","querySelectorAll","form","createElement","className","formInputs","label","type","name","qa","options","notification","setAttribute","editableCell","forEach","param","inputWrapper","input","optionText","option","value","text","appendChild","innerHTML","concat","submitButton","showNotification","message","textContent","setTimeout","saveChanges","newValue","newRow","formData","isValid","parseFloat","checkValidity","trim","Object","values","cell","reset","body","header","index","rows","sortOrder","tbody","Array","from","children","toLowerCase","sort","a","b","aValue","bValue","row","event","selectedRow","target","closest","classList","contains","remove","add","startEditingCell","oldValue","e","key","focus"],"version":3,"file":"index.5113fb22.js.map"}